package com.ionic.sdk.agent.request.createassertion;

import com.ionic.sdk.agent.request.base.AgentRequestBase;

/**
 * Represents the input for a request to the Ionic Machina Tools CreateAssertion API call.
 * <p>
 * The "isFullAssertion" flag is a Machina service instruction indicating whether an abbreviated or full
 * assertion should be generated by the service.  Full assertions include all device attributes known to the
 * key server, where abbreviated assertions include only device id.
 * <p>
 * Note that support for full and abbreviated assertions is controlled via configuration in Ionic key servers.
 * <p>
 * The "nonce" value is an optional extra feature.  It can be used to confirm that the creator of the
 * assertion and the validator share access to the same piece of secret data. This is different from the
 * use of nonces in some crypto systems, where they are just another source of randomness mixed in to
 * the system.
 * <p>
 * If "nonce" is unspecified, or an empty string, a default value is used in the cryptography operation.
 * <p>
 * If specified, the nonce must be provided to any validator of the resulting assertion.  The result of
 * the {@link CreateIdentityAssertionTransaction} cannot be validated without the same nonce.
 */
public class CreateIdentityAssertionRequest extends AgentRequestBase {

    /**
     * Flag indicating whether abbreviated or full assertion should be generated by service.
     */
    private final boolean isFullAssertion;

    /**
     * The recipient for which this assertion is ultimately intended.
     */
    private final String uri;

    /**
     * Nonce value for the identity assertion.
     */
    private final String nonce;

    /**
     * Constructor.
     *
     * @param isFullAssertion flag indicating whether abbreviated or full assertion should be generated
     * @param uri             the recipient for which this assertion is ultimately intended
     */
    public CreateIdentityAssertionRequest(final boolean isFullAssertion, final String uri) {
        this.isFullAssertion = isFullAssertion;
        this.uri = uri;
        this.nonce = null;  // default value supplied on use
    }

    /**
     * Constructor.
     *
     * @param isFullAssertion flag indicating whether abbreviated or full assertion should be generated
     * @param uri             the recipient for which this assertion is ultimately intended
     * @param nonce           the nonce value for the identity assertion
     */
    public CreateIdentityAssertionRequest(final boolean isFullAssertion, final String uri, final String nonce) {
        this.isFullAssertion = isFullAssertion;
        this.uri = uri;
        this.nonce = nonce;
    }

    /**
     * @return flag indicating whether abbreviated or full assertion should be generated by service
     */
    public boolean isFullAssertion() {
        return isFullAssertion;
    }

    /**
     * @return the recipient for which this assertion is ultimately intended
     */
    public String getUri() {
        return uri;
    }

    /**
     * @return the nonce value for the identity assertion
     */
    public String getNonce() {
        return nonce;
    }

    /** Value of serialVersionUID for this class. */
    private static final long serialVersionUID = -7813042907260622641L;
}
