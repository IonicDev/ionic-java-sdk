package com.ionic.sdk.ks.test;

import com.ionic.sdk.agent.Agent;
import com.ionic.sdk.cipher.rsa.model.RsaKeyHolder;
import com.ionic.sdk.cipher.rsa.model.RsaKeyPersistor;
import com.ionic.sdk.core.codec.Transcoder;
import com.ionic.sdk.core.io.Stream;
import com.ionic.sdk.core.res.Resource;
import com.ionic.sdk.device.DeviceUtils;
import com.ionic.sdk.device.profile.persistor.DeviceProfilePersistorPlainText;
import com.ionic.sdk.device.profile.persistor.ProfilePersistor;
import com.ionic.sdk.error.IonicException;
import com.ionic.sdk.error.SdkData;
import com.ionic.sdk.error.SdkError;
import com.ionic.sdk.key.KeyServices;
import com.ionic.sdk.ks.loopback.LoopbackAgent;
import org.junit.Assume;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.UUID;

/**
 * Broker access to the environment in which the Ionic test suite is running.  This allows for the test suite to run
 * in three distinct modes:
 * <ul>
 * <li>a mode where a new device enrollment is performed, with that device profile being used for subsequent tests</li>
 * <li>a mode where an existing device enrollment is used</li>
 * <li>a mode where a test <code>KeyServices</code> implementation is used</li>
 * </ul>
 */
public final class IonicTestEnvironment {

    /**
     * The value read from the system environment variable "IONIC_REPO_ROOT".  This variable should point to a
     * filesystem folder that contains a subfolder "JavaSDK", which should contain the "JavaSDK" git repository.  This
     * environment must be defined for the test suite to run successfully.
     */
    private final String envIonicRepoRoot;

    /**
     * The value read from the system environment variable "TEST_REGISTRATION_URL".  If this variable is defined, the
     * test suite will run in the "new device profile" mode.  In this mode, the test suite will first perform a device
     * enrollment, and then use the device profile in other tests of the <code>KeyServices</code> functionality.
     */
    private final String envEnrollmentUrl;

    /**
     * The value read from the system environment variable "TEST_PROFILE".  This variable may point to a resource on
     * the classpath that contains Secure Enrollment Profile data from a previous device enrollment. If this variable
     * is defined, the test suite will run in the "existing device profile" mode.  In this mode, the previous device
     * enrollment will be used by the test suite to exercise <code>KeyServices</code> functionality.
     */
    private final String envTestProfile;

    /**
     * The filesystem folder that will contain files generated by the execution of the test suite.
     */
    private final File folderTestOutputs;

    /**
     * The filesystem folder that will contain files with new device enrollment data.
     */
    private final File folderTestRegistrations;

    /**
     * If both system environment variables ("TEST_REGISTRATION_URL", "TEST_PROFILE") are undefined, the test suite
     * will run in "loopback" mode.  In this mode, a locally generated cache of Ionic key data is used to exercise
     * "KeyServices" functionality.  The persistent store of key data takes the form of a password-protected key vault
     * using this password.
     */
    private final String passwordKeyVault;

    /**
     * If both system environment variables ("TEST_REGISTRATION_URL", "TEST_PROFILE") are undefined, the test suite
     * will run in "loopback" mode.  In this mode, a locally generated cache of Ionic key data is used to exercise
     * "KeyServices" functionality.  The persistent store of key data takes the form of a password-protected key vault
     * using this filesystem location.
     */
    private final File fileKeyVault;

    /**
     * Constructor.
     */
    private IonicTestEnvironment() {
        envIonicRepoRoot = System.getenv("IONIC_REPO_ROOT");
        envEnrollmentUrl = System.getenv("TEST_REGISTRATION_URL");
        envTestProfile = System.getenv("TEST_PROFILE");
        folderTestOutputs = new File(envIonicRepoRoot, "JavaSDK/TestOutputs");
        folderTestRegistrations = new File(envIonicRepoRoot, "JavaSDK/TestRegistrations");
        final long timestamp = System.currentTimeMillis();
        passwordKeyVault = UUID.randomUUID().toString();
        fileKeyVault = new File(folderTestOutputs,
                String.format("%s.%s.%d.vault", getClass().getSimpleName(), passwordKeyVault, timestamp));
    }

    /**
     * @return true, iff the test environment is configured to use "new profile" mode
     */
    public boolean isNewProfile() {
        return (envEnrollmentUrl != null);
    }

    /**
     * @return true, iff the test environment is configured to use "existing profile" mode
     */
    public boolean isExistingProfile() {
        return (envTestProfile != null);
    }

    /**
     * @return the enrollment URL for the test environment tenant keyspace
     */
    public String getEnrollmentUrl() {
        return envEnrollmentUrl;
    }

    /**
     * @return the {@link KeyServices} implementation to be used by the test suite
     * @throws IonicException on failure to resolve the persistor file location, or the KeyVault file location
     */
    public KeyServices getKeyServices() throws IonicException {
        final File fileProfilePersistor = getFileProfilePersistor();
        final ProfilePersistor profilePersistor = (fileProfilePersistor == null)
                ? null : new DeviceProfilePersistorPlainText(fileProfilePersistor.getPath());
        return (profilePersistor == null)
                ? new LoopbackAgent(fileKeyVault, passwordKeyVault) : new Agent(profilePersistor);
    }

    /**
     * @return the Secure Enrollment Profile persistor to be used by the test suite
     * @throws IonicException on failure to resolve the persistor file location
     */
    public ProfilePersistor getProfilePersistor() throws IonicException {
        return new DeviceProfilePersistorPlainText(getFileProfilePersistor().getAbsolutePath());
    }

    /**
     * The test output folder contains file resources written during the run of the project test suite.
     *
     * @return the folder associated with the test output of the test suite
     * @throws IonicException on environment failure, or failure to create the needed folder
     */
    public File getFolderTestOutputsMkdir() throws IonicException {
        SdkData.checkTrue(envIonicRepoRoot != null, SdkError.ISAGENT_OPENFILE);
        final File folderOutputs = folderTestOutputs;
        final boolean existsFolder = folderOutputs.exists() && folderOutputs.isDirectory();
        SdkData.checkTrue(existsFolder || folderOutputs.mkdir(), SdkError.ISAGENT_ERROR);
        return folderOutputs;
    }

    /**
     * In mode "new registration", the Java SDK uses a filesystem location which is a sibling of the C++ location.
     * <p>
     * In mode "existing registration", the Java SDK uses a classpath location of an existing resource.
     * <p>
     * In mode "loopback", there is no Secure Enrollment Profile.
     *
     * @return the file associated with the default Java SDK test SEP
     * @throws IonicException on failure to locate the persistor file
     */
    public File getFileProfilePersistor() throws IonicException {
        final File file;
        if (envEnrollmentUrl != null) {
            final boolean existsFolder = folderTestRegistrations.exists() && folderTestRegistrations.isDirectory();
            SdkData.checkTrue(existsFolder || folderTestRegistrations.mkdir(), SdkError.ISAGENT_RESOURCE_NOT_FOUND);
            file = new File(folderTestRegistrations, "plaintext.JavaSDK.sep");
        } else if (envTestProfile != null) {
            final URL url = Resource.resolve(envTestProfile);
            // if not found on classpath, interpret as a file path
            file = ((url == null) ? new File(envTestProfile) : DeviceUtils.toFile(envTestProfile));
            SdkData.checkTrue(file.exists(), SdkError.ISAGENT_RESOURCE_NOT_FOUND);
        } else {
            file = null;
        }
        return file;
    }

    /**
     * Return a pre-generated RSA key pair of the appropriate size.  When running tests on slow platforms, this
     * saves a lot of time.
     *
     * @return the pre-generated keypair object
     * @throws IonicException on inability to access test resources
     */
    public RsaKeyHolder getTestRsaKeyHolder() throws IonicException {
        final String resourcePubkey = "com/ionic/sdk/agent/request/createdevice/test/pubkey.txt";
        final String resourcePrivkey = "com/ionic/sdk/agent/request/createdevice/test/privkey.txt";
        final URL urlPubkey = Resource.resolve(resourcePubkey);
        final URL urlPrivkey = Resource.resolve(resourcePrivkey);
        Assume.assumeNotNull("classpath location of pre-generated pubkey is unavailable", urlPubkey);
        Assume.assumeNotNull("classpath location of pre-generated privkey is unavailable", urlPrivkey);
        try {
            final String b64Pubkey = Transcoder.utf8().encode(Stream.read(urlPubkey));
            final String b64Privkey = Transcoder.utf8().encode(Stream.read(urlPrivkey));
            return new RsaKeyPersistor().fromBase64(b64Pubkey, b64Privkey);
        } catch (IOException e) {
            throw new IonicException(SdkError.ISAGENT_OPENFILE, e);
        }
    }

    /**
     * The singleton instance of the test environment class.  The singleton allows for the use of one KeyServices
     * implementation in the case that an "ionic.com" tenant is not configured for the environment.
     */
    private static final IonicTestEnvironment IONIC_TEST_ENVIRONMENT = new IonicTestEnvironment();

    /**
     * @return the test environment singleton, used to interact with the environment in which the test suite is running
     */
    public static IonicTestEnvironment getInstance() {
        return IONIC_TEST_ENVIRONMENT;
    }
}
